import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    START,
    VAGON_1, CHOICE_1,
    A1, A1_1, A1_2, A2,
    B1, B1_1, B1_2, B2,
    VAGON_2, VAGON_3, VAGON_4, VAGON_5, VAGON_6, VAGON_7,
    FINAL
) = map(str, range(18))

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    user_id = update.effective_user.id
    user_data[user_id] = {
        "ticket": False,
        "elena": False,
        "help_others": False,
    }

    keyboard = [
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∫—É–ø–µ", callback_data="exit")],
        [InlineKeyboardButton("–û—Å—Ç–∞—Ç—å—Å—è –≤ –∫—É–ø–µ", callback_data="stay")]
    ]

    await update.message.reply_text(
        "üöÇ *–í—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –≤ —Å—Ç–∞—Ä–æ–º –≤–∞–≥–æ–Ω–µ —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ –ø–æ–µ–∑–¥–∞.*\n\n"
        "–ó–∞ –æ–∫–Ω–æ–º –º–µ–ª—å–∫–∞—é—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ—Ä—ã. –ù–∞ —Å–∏–¥–µ–Ω—å–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –∑–∞–ø–∏—Å–∫—É —Å –∏–º–µ–Ω–µ–º ¬´–ê–ª–µ–∫—Å–µ–π¬ª. "
        "–í–¥–∞–ª–∏ –≤–∏–¥–Ω–µ–µ—Ç—Å—è —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–∏–≥—É—Ä–∞, –º–∞—à—É—â–∞—è —Ä—É–∫–æ–π.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return VAGON_1


async def vagon_1_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()

    if query.data == "exit":
        keyboard = [
            [InlineKeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ê–Ω–Ω–æ–π", callback_data="talk")],
            [InlineKeyboardButton("–ò–¥—Ç–∏ –¥–∞–ª—å—à–µ", callback_data="forward")]
        ]
        await query.edit_message_text(
            "üö™ –í—ã –≤—ã—Ö–æ–¥–∏—Ç–µ –≤ –∫–æ—Ä–∏–¥–æ—Ä –∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–Ω–∏—Ü—É –ê–Ω–Ω—É.\n\n"
            "¬´–í—ã –Ω–µ –ø–µ—Ä–≤—ã–π, –∫—Ç–æ –∑–∞–±—ã–ª –∑–¥–µ—Å—å —Å–µ–±—è¬ª, - –≥–æ–≤–æ—Ä–∏—Ç –æ–Ω–∞, –ø–æ–ø—Ä–∞–≤–ª—è—è —Ñ–æ—Ä–º–µ–Ω–Ω—É—é —à–ª—è–ø—É.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CHOICE_1
    else:
        keyboard = [
            [InlineKeyboardButton("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∂–µ–Ω—â–∏–Ω–µ", callback_data="woman")],
            [InlineKeyboardButton("–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –≤–æ–∫–∑–∞–ª–µ", callback_data="station")]
        ]
        await query.edit_message_text(
            "üõã –í—ã –æ—Å—Ç–∞—ë—Ç–µ—Å—å –≤ –∫—É–ø–µ. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤—Å–ø–ª—ã–≤–∞—é—Ç –æ–±—Ä—ã–≤–∫–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: "
            "–∂–µ–Ω—â–∏–Ω–∞... –≤–æ–∫–∑–∞–ª... –±–∏–ª–µ—Ç...",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return B1


async def choice_1_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "talk":
        text = (
            "üë©‚úàÔ∏è –ê–Ω–Ω–∞ —É–ª—ã–±–∞–µ—Ç—Å—è: ¬´–≠—Ç–æ—Ç –ø–æ–µ–∑–¥ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç –ø–æ –ø–∞–º—è—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤. "
            "–ß—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å—Å—è, –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—à–ª–æ–º¬ª."
        )

        keyboard = [
            [InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç—å –æ —Å–µ–±–µ", callback_data="ask_me")],
            [InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ –¥–µ–ª–∞—Ç—å", callback_data="ask_do")],
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return A1

    else:
        text = "üö∂ –í—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π –≤–∞–≥–æ–Ω..."
        await query.edit_message_text(text, parse_mode="Markdown")
        return await vagon_2_handler(update, context)

async def a1_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "ask_me":
        text = "üë©‚úàÔ∏è –ê–Ω–Ω–∞: ¬´–Ø –≤–∏–¥–µ–ª–∞ –≤–∞—Å —Ä–∞–Ω—å—à–µ –≤ –≤–∞–≥–æ–Ω–µ ‚Ññ7. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–º –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã¬ª."

        keyboard = [
            [InlineKeyboardButton("–ò–¥—Ç–∏ –≤ –≤–∞–≥–æ–Ω ‚Ññ7", callback_data="vagon7")],
            [InlineKeyboardButton("–°–Ω–∞—á–∞–ª–∞ –æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–≥–æ–Ω—ã 2-6", callback_data="vagon2_6")],
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return A1_1

    else:
        text = (
            "üë©‚úàÔ∏è –ê–Ω–Ω–∞ —Å–æ–≤–µ—Ç—É–µ—Ç: ¬´–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –≤ –≤–∞–≥–æ–Ω-—Ä–µ—Å—Ç–æ—Ä–∞–Ω (‚Ññ5). "
            "–¢–∞–º —á–∞—Å—Ç–æ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã¬ª."
        )

        keyboard = [
            [InlineKeyboardButton("–ü–æ—Å–ª—É—à–∞—Ç—å —Å–æ–≤–µ—Ç", callback_data="vagon5")],
            [InlineKeyboardButton("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="vagon7")],
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return A1_2

async def b1_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "woman":
        text = "üë© –ü–µ—Ä–µ–¥ –≥–ª–∞–∑–∞–º–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ–±—Ä–∞–∑ –∂–µ–Ω—â–∏–Ω—ã. –í—ã —Å–ª—ã—à–∏—Ç–µ –≥–æ–ª–æ—Å: ¬´–ê–ª–µ–∫—Å–µ–π, –Ω–µ —É–µ–∑–∂–∞–π!¬ª"

        keyboard = [
            [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="exit_search")],
            [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—Å–ø–æ–º–∏–Ω–∞—Ç—å", callback_data="remember_more")],
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return B1_1

    else:
        text = (
            "üèö –í—Å–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤–æ–∫–∑–∞–ª. –í—ã —Å–ø–µ—à–∏–ª–∏ –Ω–∞ –ø–æ–µ–∑–¥, –Ω–æ –∑–∞–±—ã–ª–∏ –±–∏–ª–µ—Ç. "
            "–ö–∞–∂–µ—Ç—Å—è, –±–∏–ª–µ—Ç - –∫–ª—é—á –∫ –≤—ã—Ö–æ–¥—É!"
        )

        keyboard = [
            [InlineKeyboardButton("–ò—Å–∫–∞—Ç—å –ø—Ä–æ–≤–æ–¥–Ω–∏—Ü—É", callback_data="find_conductor")],
            [InlineKeyboardButton("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø–æ–µ–∑–¥", callback_data="explore")],
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return B2

async def b1_1_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "exit_search":
        text = (
            "üö™ –í—ã–π–¥—è –≤ –∫–æ—Ä–∏–¥–æ—Ä, –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–º.\n\n"
            "¬´–Ø –ù–∏–∫–æ–ª–∞–π. –í—ã –∑–Ω–∞–µ—Ç–µ –ï–ª–µ–Ω—É?¬ª - –≥–æ–≤–æ—Ä–∏—Ç –æ–Ω."
        )

        keyboard = [
            [InlineKeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ù–∏–∫–æ–ª–∞–µ–º", callback_data="talk_nik")],
            [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –º–∏–º–æ", callback_data="ignore")],
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return B1_2

    else:
        user_data[user_id]['elena'] = True
        text = (
            "üíî –Ø—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã —Å—Å–æ—Ä–∏—Ç–µ—Å—å —Å –ï–ª–µ–Ω–æ–π. "
            "–û–Ω–∞ –ø–ª–∞—á–µ—Ç: ¬´–¢—ã –æ–±–µ—â–∞–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è!¬ª\n\n"
            "–¢–µ–ø–µ—Ä—å –ø–æ–Ω—è—Ç–Ω–æ, –ø–æ—á–µ–º—É –≤—ã –∑–¥–µ—Å—å..."
        )

        keyboard = [
            [InlineKeyboardButton("–°—Ä–æ—á–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–æ–¥–Ω–∏—Ü—É", callback_data="find_anna")],
            [InlineKeyboardButton("–ò–¥—Ç–∏ –≤ –≤–∞–≥–æ–Ω-—Ä–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="vagon5")],
        ]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return B1_2

async def vagon_2_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    text = (
        "üß∏ *–í–∞–≥–æ–Ω ‚Ññ2: –î–µ—Ç—Å–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è*\n\n"
        "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –≤–∞—à–∞ –¥–µ—Ç—Å–∫–∞—è –∫–æ–º–Ω–∞—Ç–∞. –í —É–≥–ª—É —Å–∏–¥–∏—Ç –º–∞–ª—å—á–∏–∫ - –≤—ã –≤ –¥–µ—Ç—Å—Ç–≤–µ."
    )

    keyboard = [
        [InlineKeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –º–∞–ª—å—á–∏–∫–æ–º", callback_data="talk_boy")],
        [InlineKeyboardButton("–û—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–Ω–∞—Ç—É", callback_data="explore_room")],
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return VAGON_2

async def vagon_3_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    text = (
        "üíº *–í–∞–≥–æ–Ω ‚Ññ3: –†–∞–±–æ—Ç–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å*\n\n"
        "–û—Ñ–∏—Å–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞. –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å—Ç–æ–∏—Ç –≤–∞—à –±—ã–≤—à–∏–π –Ω–∞—á–∞–ª—å–Ω–∏–∫."
    )

    keyboard = [
        [InlineKeyboardButton("–°–ø–æ—Ä–∏—Ç—å —Å –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–º", callback_data="argue")],
        [InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Ä—É—á–µ–Ω–∏–µ", callback_data="work")],
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return VAGON_3

async def vagon_4_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    text = (
        "üåë *–í–∞–≥–æ–Ω ‚Ññ4: –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ*\n\n"
        "–¢–µ–º–Ω—ã–π –≤–∞–≥–æ–Ω. –í–æ–∫—Ä—É–≥ - —Å–∏–ª—É—ç—Ç—ã –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç."
    )

    keyboard = [
        [InlineKeyboardButton("–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–≥–æ–≤–æ—Ä–∏—Ç—å", callback_data="talk_people")],
        [InlineKeyboardButton("–ó–∞–ø–ª–∞–∫–∞—Ç—å –æ—Ç –æ—Ç—á–∞—è–Ω–∏—è", callback_data="cry")],
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return VAGON_4

async def vagon_5_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    text = (
        "‚òï *–í–∞–≥–æ–Ω-—Ä–µ—Å—Ç–æ—Ä–∞–Ω*\n\n"
        "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—ã: —Å—Ç–∞—Ä–∏–∫ –≤ —É–≥–ª—É –∏ –∂–µ–Ω—â–∏–Ω–∞ —É –æ–∫–Ω–∞."
    )

    keyboard = [
        [InlineKeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ —Å—Ç–∞—Ä–∏–∫–æ–º", callback_data="old_man")],
        [InlineKeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∂–µ–Ω—â–∏–Ω–æ–π", callback_data="woman_rest")],
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return VAGON_5

async def vagon_6_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    text = (
        "üöâ *–°—Ç–∞–Ω—Ü–∏—è –≤—ã–±–æ—Ä–∞*\n\n"
        "–ü–æ–µ–∑–¥ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è. –ù–∞ —Ç–∞–±–ª–∏—á–∫–µ: ¬´–ù–∞–∑–∞–¥ ‚Äî –≤ –ø—Ä–æ—à–ª–æ–µ. –í–ø–µ—Ä—ë–¥ ‚Äî –≤ –±—É–¥—É—â–µ–µ¬ª."
    )

    keyboard = [
        [InlineKeyboardButton("–°–æ–π—Ç–∏ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏", callback_data="past")],
        [InlineKeyboardButton("–û—Å—Ç–∞—Ç—å—Å—è –≤ –ø–æ–µ–∑–¥–µ", callback_data="future")],
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return VAGON_6

async def vagon_7_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data[user_id]['ticket'] = True

    text = (
        "üîë *–í–∞–≥–æ–Ω ‚Ññ7: –ö–æ–º–Ω–∞—Ç–∞ –∏—Å—Ç–∏–Ω—ã*\n\n"
        "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã —É–µ–∑–∂–∞–µ—Ç–µ, –æ—Å—Ç–∞–≤–ª—è—è –ï–ª–µ–Ω—É –æ–¥–Ω—É –≤ –±–æ–ª—å–Ω–∏—Ü–µ. "
        "–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç –±–∏–ª–µ—Ç —Å –Ω–∞–¥–ø–∏—Å—å—é ¬´–î–æ–º–æ–π¬ª."
    )

    keyboard = [
        [InlineKeyboardButton("–í–∑—è—Ç—å –±–∏–ª–µ—Ç", callback_data="take_ticket")],
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return FINAL

async def final_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = user_data.get(user_id, {})

    if data.get('ticket') and data.get('elena'):
        text = (
            "üåü *–ü—Ä–æ—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ*\n\n"
            "–í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–º –≤–æ–∫–∑–∞–ª–µ, —Å–∂–∏–º–∞—è –±–∏–ª–µ—Ç. "
            "–í–¥–∞–ª–∏ –≤–∏–¥–∏—Ç–µ –ï–ª–µ–Ω—É, –∫–æ—Ç–æ—Ä–∞—è –º–∞—à–µ—Ç –≤–∞–º —Ä—É–∫–æ–π."
        )
    elif data.get('help_others'):
        text = (
            "üë©‚úàÔ∏è *–ù–æ–≤–∞—è –ø—Ä–æ–≤–æ–¥–Ω–∏—Ü–∞*\n\n"
            "–í—ã –æ—Å—Ç–∞—ë—Ç–µ—Å—å –≤ –ø–æ–µ–∑–¥–µ, –ø–æ–º–æ–≥–∞—è –¥—Ä—É–≥–∏–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º. "
            "–¢–µ–ø–µ—Ä—å –≤—ã - —á–∞—Å—Ç—å —ç—Ç–æ–≥–æ –≤–µ—á–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è."
        )
    else:
        text = (
            "üåå *–í–µ—á–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ*\n\n"
            "–ü–æ–µ–∑–¥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ. –ó–∞ –æ–∫–Ω–æ–º –º–µ–ª—å–∫–∞—é—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏..."
        )

    await query.edit_message_text(text, parse_mode="Markdown")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    return ConversationHandler.END

# –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)

def main() -> None:
    application = ApplicationBuilder().token("8068795309:AAEJo__h_FPTfYuBZSxBDLszC8aLNblRXsY").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            'VAGON_1': [CallbackQueryHandler(vagon_1_choice)],
            'CHOICE_1': [CallbackQueryHandler(choice_1_handler)],

            'FINAL': [CallbackQueryHandler(final_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=True  # –í–∞–∂–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!
    )

    application.add_handler(conv_handler)
    application.run_polling()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    return ConversationHandler.END


def main() -> None:
    application = ApplicationBuilder().token("8068795309:AAEJo__h_FPTfYuBZSxBDLszC8aLNblRXsY").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            VAGON_1: [CallbackQueryHandler(vagon_1_choice)],
            CHOICE_1: [CallbackQueryHandler(choice_1_handler)],
            A1: [CallbackQueryHandler(a1_handler)],
            A1_1: [CallbackQueryHandler(vagon_7_handler)],
            A1_2: [CallbackQueryHandler(vagon_5_handler)],
            B1: [CallbackQueryHandler(b1_handler)],
            B1_1: [CallbackQueryHandler(b1_1_handler)],
            B1_2: [CallbackQueryHandler(vagon_5_handler)],
            B2: [CallbackQueryHandler(vagon_2_handler)],
            VAGON_2: [CallbackQueryHandler(vagon_3_handler)],
            VAGON_3: [CallbackQueryHandler(vagon_4_handler)],
            VAGON_4: [CallbackQueryHandler(vagon_5_handler)],
            VAGON_5: [CallbackQueryHandler(vagon_6_handler)],
            VAGON_6: [CallbackQueryHandler(vagon_7_handler)],
            VAGON_7: [CallbackQueryHandler(final_handler)],
            FINAL: [CallbackQueryHandler(final_handler)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_message=False  # –ö–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == "__main__":
    main()
